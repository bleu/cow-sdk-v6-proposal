/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IConditionalOrder {
  export type ConditionalOrderParamsStruct = {
    handler: AddressLike;
    salt: BytesLike;
    staticInput: BytesLike;
  };

  export type ConditionalOrderParamsStructOutput = [
    handler: string,
    salt: string,
    staticInput: string
  ] & { handler: string; salt: string; staticInput: string };
}

export declare namespace GPv2Order {
  export type DataStruct = {
    sellToken: AddressLike;
    buyToken: AddressLike;
    receiver: AddressLike;
    sellAmount: BigNumberish;
    buyAmount: BigNumberish;
    validTo: BigNumberish;
    appData: BytesLike;
    feeAmount: BigNumberish;
    kind: BytesLike;
    partiallyFillable: boolean;
    sellTokenBalance: BytesLike;
    buyTokenBalance: BytesLike;
  };

  export type DataStructOutput = [
    sellToken: string,
    buyToken: string,
    receiver: string,
    sellAmount: bigint,
    buyAmount: bigint,
    validTo: bigint,
    appData: string,
    feeAmount: bigint,
    kind: string,
    partiallyFillable: boolean,
    sellTokenBalance: string,
    buyTokenBalance: string
  ] & {
    sellToken: string;
    buyToken: string;
    receiver: string;
    sellAmount: bigint;
    buyAmount: bigint;
    validTo: bigint;
    appData: string;
    feeAmount: bigint;
    kind: string;
    partiallyFillable: boolean;
    sellTokenBalance: string;
    buyTokenBalance: string;
  };
}

export interface TWAPInterface extends Interface {
  getFunction(
    nameOrSignature: "getTradeableOrder" | "supportsInterface" | "verify"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ConditionalOrderCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTradeableOrder",
    values: [AddressLike, AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      GPv2Order.DataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTradeableOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace ConditionalOrderCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    params: IConditionalOrder.ConditionalOrderParamsStruct
  ];
  export type OutputTuple = [
    owner: string,
    params: IConditionalOrder.ConditionalOrderParamsStructOutput
  ];
  export interface OutputObject {
    owner: string;
    params: IConditionalOrder.ConditionalOrderParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TWAP extends BaseContract {
  connect(runner?: ContractRunner | null): TWAP;
  waitForDeployment(): Promise<this>;

  interface: TWAPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTradeableOrder: TypedContractMethod<
    [
      owner: AddressLike,
      arg1: AddressLike,
      ctx: BytesLike,
      staticInput: BytesLike,
      arg4: BytesLike
    ],
    [GPv2Order.DataStructOutput],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verify: TypedContractMethod<
    [
      owner: AddressLike,
      sender: AddressLike,
      _hash: BytesLike,
      domainSeparator: BytesLike,
      ctx: BytesLike,
      staticInput: BytesLike,
      offchainInput: BytesLike,
      arg7: GPv2Order.DataStruct
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTradeableOrder"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      arg1: AddressLike,
      ctx: BytesLike,
      staticInput: BytesLike,
      arg4: BytesLike
    ],
    [GPv2Order.DataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      sender: AddressLike,
      _hash: BytesLike,
      domainSeparator: BytesLike,
      ctx: BytesLike,
      staticInput: BytesLike,
      offchainInput: BytesLike,
      arg7: GPv2Order.DataStruct
    ],
    [void],
    "view"
  >;

  getEvent(
    key: "ConditionalOrderCreated"
  ): TypedContractEvent<
    ConditionalOrderCreatedEvent.InputTuple,
    ConditionalOrderCreatedEvent.OutputTuple,
    ConditionalOrderCreatedEvent.OutputObject
  >;

  filters: {
    "ConditionalOrderCreated(address,tuple)": TypedContractEvent<
      ConditionalOrderCreatedEvent.InputTuple,
      ConditionalOrderCreatedEvent.OutputTuple,
      ConditionalOrderCreatedEvent.OutputObject
    >;
    ConditionalOrderCreated: TypedContractEvent<
      ConditionalOrderCreatedEvent.InputTuple,
      ConditionalOrderCreatedEvent.OutputTuple,
      ConditionalOrderCreatedEvent.OutputObject
    >;
  };
}
