/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IConditionalOrder {
  export type ConditionalOrderParamsStruct = {
    handler: AddressLike;
    salt: BytesLike;
    staticInput: BytesLike;
  };

  export type ConditionalOrderParamsStructOutput = [
    handler: string,
    salt: string,
    staticInput: string
  ] & { handler: string; salt: string; staticInput: string };
}

export declare namespace ComposableCoW {
  export type ProofStruct = { location: BigNumberish; data: BytesLike };

  export type ProofStructOutput = [location: bigint, data: string] & {
    location: bigint;
    data: string;
  };
}

export declare namespace GPv2Order {
  export type DataStruct = {
    sellToken: AddressLike;
    buyToken: AddressLike;
    receiver: AddressLike;
    sellAmount: BigNumberish;
    buyAmount: BigNumberish;
    validTo: BigNumberish;
    appData: BytesLike;
    feeAmount: BigNumberish;
    kind: BytesLike;
    partiallyFillable: boolean;
    sellTokenBalance: BytesLike;
    buyTokenBalance: BytesLike;
  };

  export type DataStructOutput = [
    sellToken: string,
    buyToken: string,
    receiver: string,
    sellAmount: bigint,
    buyAmount: bigint,
    validTo: bigint,
    appData: string,
    feeAmount: bigint,
    kind: string,
    partiallyFillable: boolean,
    sellTokenBalance: string,
    buyTokenBalance: string
  ] & {
    sellToken: string;
    buyToken: string;
    receiver: string;
    sellAmount: bigint;
    buyAmount: bigint;
    validTo: bigint;
    appData: string;
    feeAmount: bigint;
    kind: string;
    partiallyFillable: boolean;
    sellTokenBalance: string;
    buyTokenBalance: string;
  };
}

export interface ComposableCoWInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cabinet"
      | "create"
      | "createWithContext"
      | "domainSeparator"
      | "getTradeableOrderWithSignature"
      | "hash"
      | "isValidSafeSignature"
      | "remove"
      | "roots"
      | "setRoot"
      | "setRootWithContext"
      | "setSwapGuard"
      | "singleOrders"
      | "swapGuards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConditionalOrderCreated"
      | "MerkleRootSet"
      | "SwapGuardSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cabinet",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [IConditionalOrder.ConditionalOrderParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithContext",
    values: [
      IConditionalOrder.ConditionalOrderParamsStruct,
      AddressLike,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeableOrderWithSignature",
    values: [
      AddressLike,
      IConditionalOrder.ConditionalOrderParamsStruct,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [IConditionalOrder.ConditionalOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSafeSignature",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "roots", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setRoot",
    values: [BytesLike, ComposableCoW.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootWithContext",
    values: [BytesLike, ComposableCoW.ProofStruct, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "singleOrders",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapGuards",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cabinet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeableOrderWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSafeSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRootWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapGuards", data: BytesLike): Result;
}

export namespace ConditionalOrderCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    params: IConditionalOrder.ConditionalOrderParamsStruct
  ];
  export type OutputTuple = [
    owner: string,
    params: IConditionalOrder.ConditionalOrderParamsStructOutput
  ];
  export interface OutputObject {
    owner: string;
    params: IConditionalOrder.ConditionalOrderParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootSetEvent {
  export type InputTuple = [
    owner: AddressLike,
    root: BytesLike,
    proof: ComposableCoW.ProofStruct
  ];
  export type OutputTuple = [
    owner: string,
    root: string,
    proof: ComposableCoW.ProofStructOutput
  ];
  export interface OutputObject {
    owner: string;
    root: string;
    proof: ComposableCoW.ProofStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapGuardSetEvent {
  export type InputTuple = [owner: AddressLike, swapGuard: AddressLike];
  export type OutputTuple = [owner: string, swapGuard: string];
  export interface OutputObject {
    owner: string;
    swapGuard: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComposableCoW extends BaseContract {
  connect(runner?: ContractRunner | null): ComposableCoW;
  waitForDeployment(): Promise<this>;

  interface: ComposableCoWInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cabinet: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;

  create: TypedContractMethod<
    [params: IConditionalOrder.ConditionalOrderParamsStruct, dispatch: boolean],
    [void],
    "nonpayable"
  >;

  createWithContext: TypedContractMethod<
    [
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: AddressLike,
      data: BytesLike,
      dispatch: boolean
    ],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getTradeableOrderWithSignature: TypedContractMethod<
    [
      owner: AddressLike,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: BytesLike,
      proof: BytesLike[]
    ],
    [
      [GPv2Order.DataStructOutput, string] & {
        order: GPv2Order.DataStructOutput;
        signature: string;
      }
    ],
    "view"
  >;

  hash: TypedContractMethod<
    [params: IConditionalOrder.ConditionalOrderParamsStruct],
    [string],
    "view"
  >;

  isValidSafeSignature: TypedContractMethod<
    [
      safe: AddressLike,
      sender: AddressLike,
      _hash: BytesLike,
      _domainSeparator: BytesLike,
      arg4: BytesLike,
      encodeData: BytesLike,
      payload: BytesLike
    ],
    [string],
    "view"
  >;

  remove: TypedContractMethod<
    [singleOrderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  roots: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  setRoot: TypedContractMethod<
    [root: BytesLike, proof: ComposableCoW.ProofStruct],
    [void],
    "nonpayable"
  >;

  setRootWithContext: TypedContractMethod<
    [
      root: BytesLike,
      proof: ComposableCoW.ProofStruct,
      factory: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setSwapGuard: TypedContractMethod<
    [swapGuard: AddressLike],
    [void],
    "nonpayable"
  >;

  singleOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  swapGuards: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cabinet"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [params: IConditionalOrder.ConditionalOrderParamsStruct, dispatch: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createWithContext"
  ): TypedContractMethod<
    [
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: AddressLike,
      data: BytesLike,
      dispatch: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTradeableOrderWithSignature"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: BytesLike,
      proof: BytesLike[]
    ],
    [
      [GPv2Order.DataStructOutput, string] & {
        order: GPv2Order.DataStructOutput;
        signature: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<
    [params: IConditionalOrder.ConditionalOrderParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSafeSignature"
  ): TypedContractMethod<
    [
      safe: AddressLike,
      sender: AddressLike,
      _hash: BytesLike,
      _domainSeparator: BytesLike,
      arg4: BytesLike,
      encodeData: BytesLike,
      payload: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[singleOrderHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setRoot"
  ): TypedContractMethod<
    [root: BytesLike, proof: ComposableCoW.ProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRootWithContext"
  ): TypedContractMethod<
    [
      root: BytesLike,
      proof: ComposableCoW.ProofStruct,
      factory: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapGuard"
  ): TypedContractMethod<[swapGuard: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "singleOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapGuards"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "ConditionalOrderCreated"
  ): TypedContractEvent<
    ConditionalOrderCreatedEvent.InputTuple,
    ConditionalOrderCreatedEvent.OutputTuple,
    ConditionalOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootSet"
  ): TypedContractEvent<
    MerkleRootSetEvent.InputTuple,
    MerkleRootSetEvent.OutputTuple,
    MerkleRootSetEvent.OutputObject
  >;
  getEvent(
    key: "SwapGuardSet"
  ): TypedContractEvent<
    SwapGuardSetEvent.InputTuple,
    SwapGuardSetEvent.OutputTuple,
    SwapGuardSetEvent.OutputObject
  >;

  filters: {
    "ConditionalOrderCreated(address,tuple)": TypedContractEvent<
      ConditionalOrderCreatedEvent.InputTuple,
      ConditionalOrderCreatedEvent.OutputTuple,
      ConditionalOrderCreatedEvent.OutputObject
    >;
    ConditionalOrderCreated: TypedContractEvent<
      ConditionalOrderCreatedEvent.InputTuple,
      ConditionalOrderCreatedEvent.OutputTuple,
      ConditionalOrderCreatedEvent.OutputObject
    >;

    "MerkleRootSet(address,bytes32,tuple)": TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;
    MerkleRootSet: TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;

    "SwapGuardSet(address,address)": TypedContractEvent<
      SwapGuardSetEvent.InputTuple,
      SwapGuardSetEvent.OutputTuple,
      SwapGuardSetEvent.OutputObject
    >;
    SwapGuardSet: TypedContractEvent<
      SwapGuardSetEvent.InputTuple,
      SwapGuardSetEvent.OutputTuple,
      SwapGuardSetEvent.OutputObject
    >;
  };
}
