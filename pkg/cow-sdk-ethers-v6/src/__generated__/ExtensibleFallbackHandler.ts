/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ExtensibleFallbackHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "domainVerifiers"
      | "isValidSignature"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "safeInterfaces"
      | "safeMethods"
      | "setDomainVerifier"
      | "setSafeMethod"
      | "setSupportedInterface"
      | "setSupportedInterfaceBatch"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedDomainVerifier"
      | "AddedInterface"
      | "AddedSafeMethod"
      | "ChangedDomainVerifier"
      | "ChangedSafeMethod"
      | "RemovedDomainVerifier"
      | "RemovedInterface"
      | "RemovedSafeMethod"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "domainVerifiers",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeInterfaces",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMethods",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDomainVerifier",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeMethod",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedInterface",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedInterfaceBatch",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "domainVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDomainVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedInterfaceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AddedDomainVerifierEvent {
  export type InputTuple = [
    safe: AddressLike,
    domainSeparator: BytesLike,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    safe: string,
    domainSeparator: string,
    verifier: string
  ];
  export interface OutputObject {
    safe: string;
    domainSeparator: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddedInterfaceEvent {
  export type InputTuple = [safe: AddressLike, interfaceId: BytesLike];
  export type OutputTuple = [safe: string, interfaceId: string];
  export interface OutputObject {
    safe: string;
    interfaceId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddedSafeMethodEvent {
  export type InputTuple = [
    safe: AddressLike,
    selector: BytesLike,
    method: BytesLike
  ];
  export type OutputTuple = [safe: string, selector: string, method: string];
  export interface OutputObject {
    safe: string;
    selector: string;
    method: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedDomainVerifierEvent {
  export type InputTuple = [
    safe: AddressLike,
    domainSeparator: BytesLike,
    oldVerifier: AddressLike,
    newVerifier: AddressLike
  ];
  export type OutputTuple = [
    safe: string,
    domainSeparator: string,
    oldVerifier: string,
    newVerifier: string
  ];
  export interface OutputObject {
    safe: string;
    domainSeparator: string;
    oldVerifier: string;
    newVerifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedSafeMethodEvent {
  export type InputTuple = [
    safe: AddressLike,
    selector: BytesLike,
    oldMethod: BytesLike,
    newMethod: BytesLike
  ];
  export type OutputTuple = [
    safe: string,
    selector: string,
    oldMethod: string,
    newMethod: string
  ];
  export interface OutputObject {
    safe: string;
    selector: string;
    oldMethod: string;
    newMethod: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedDomainVerifierEvent {
  export type InputTuple = [safe: AddressLike, domainSeparator: BytesLike];
  export type OutputTuple = [safe: string, domainSeparator: string];
  export interface OutputObject {
    safe: string;
    domainSeparator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedInterfaceEvent {
  export type InputTuple = [safe: AddressLike, interfaceId: BytesLike];
  export type OutputTuple = [safe: string, interfaceId: string];
  export interface OutputObject {
    safe: string;
    interfaceId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedSafeMethodEvent {
  export type InputTuple = [safe: AddressLike, selector: BytesLike];
  export type OutputTuple = [safe: string, selector: string];
  export interface OutputObject {
    safe: string;
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExtensibleFallbackHandler extends BaseContract {
  connect(runner?: ContractRunner | null): ExtensibleFallbackHandler;
  waitForDeployment(): Promise<this>;

  interface: ExtensibleFallbackHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  domainVerifiers: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  safeInterfaces: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  safeMethods: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;

  setDomainVerifier: TypedContractMethod<
    [domainSeparator: BytesLike, newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;

  setSafeMethod: TypedContractMethod<
    [selector: BytesLike, newMethod: BytesLike],
    [void],
    "nonpayable"
  >;

  setSupportedInterface: TypedContractMethod<
    [interfaceId: BytesLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  setSupportedInterfaceBatch: TypedContractMethod<
    [_interfaceId: BytesLike, handlerWithSelectors: BytesLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "domainVerifiers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeInterfaces"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeMethods"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDomainVerifier"
  ): TypedContractMethod<
    [domainSeparator: BytesLike, newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSafeMethod"
  ): TypedContractMethod<
    [selector: BytesLike, newMethod: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedInterface"
  ): TypedContractMethod<
    [interfaceId: BytesLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedInterfaceBatch"
  ): TypedContractMethod<
    [_interfaceId: BytesLike, handlerWithSelectors: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AddedDomainVerifier"
  ): TypedContractEvent<
    AddedDomainVerifierEvent.InputTuple,
    AddedDomainVerifierEvent.OutputTuple,
    AddedDomainVerifierEvent.OutputObject
  >;
  getEvent(
    key: "AddedInterface"
  ): TypedContractEvent<
    AddedInterfaceEvent.InputTuple,
    AddedInterfaceEvent.OutputTuple,
    AddedInterfaceEvent.OutputObject
  >;
  getEvent(
    key: "AddedSafeMethod"
  ): TypedContractEvent<
    AddedSafeMethodEvent.InputTuple,
    AddedSafeMethodEvent.OutputTuple,
    AddedSafeMethodEvent.OutputObject
  >;
  getEvent(
    key: "ChangedDomainVerifier"
  ): TypedContractEvent<
    ChangedDomainVerifierEvent.InputTuple,
    ChangedDomainVerifierEvent.OutputTuple,
    ChangedDomainVerifierEvent.OutputObject
  >;
  getEvent(
    key: "ChangedSafeMethod"
  ): TypedContractEvent<
    ChangedSafeMethodEvent.InputTuple,
    ChangedSafeMethodEvent.OutputTuple,
    ChangedSafeMethodEvent.OutputObject
  >;
  getEvent(
    key: "RemovedDomainVerifier"
  ): TypedContractEvent<
    RemovedDomainVerifierEvent.InputTuple,
    RemovedDomainVerifierEvent.OutputTuple,
    RemovedDomainVerifierEvent.OutputObject
  >;
  getEvent(
    key: "RemovedInterface"
  ): TypedContractEvent<
    RemovedInterfaceEvent.InputTuple,
    RemovedInterfaceEvent.OutputTuple,
    RemovedInterfaceEvent.OutputObject
  >;
  getEvent(
    key: "RemovedSafeMethod"
  ): TypedContractEvent<
    RemovedSafeMethodEvent.InputTuple,
    RemovedSafeMethodEvent.OutputTuple,
    RemovedSafeMethodEvent.OutputObject
  >;

  filters: {
    "AddedDomainVerifier(address,bytes32,address)": TypedContractEvent<
      AddedDomainVerifierEvent.InputTuple,
      AddedDomainVerifierEvent.OutputTuple,
      AddedDomainVerifierEvent.OutputObject
    >;
    AddedDomainVerifier: TypedContractEvent<
      AddedDomainVerifierEvent.InputTuple,
      AddedDomainVerifierEvent.OutputTuple,
      AddedDomainVerifierEvent.OutputObject
    >;

    "AddedInterface(address,bytes4)": TypedContractEvent<
      AddedInterfaceEvent.InputTuple,
      AddedInterfaceEvent.OutputTuple,
      AddedInterfaceEvent.OutputObject
    >;
    AddedInterface: TypedContractEvent<
      AddedInterfaceEvent.InputTuple,
      AddedInterfaceEvent.OutputTuple,
      AddedInterfaceEvent.OutputObject
    >;

    "AddedSafeMethod(address,bytes4,bytes32)": TypedContractEvent<
      AddedSafeMethodEvent.InputTuple,
      AddedSafeMethodEvent.OutputTuple,
      AddedSafeMethodEvent.OutputObject
    >;
    AddedSafeMethod: TypedContractEvent<
      AddedSafeMethodEvent.InputTuple,
      AddedSafeMethodEvent.OutputTuple,
      AddedSafeMethodEvent.OutputObject
    >;

    "ChangedDomainVerifier(address,bytes32,address,address)": TypedContractEvent<
      ChangedDomainVerifierEvent.InputTuple,
      ChangedDomainVerifierEvent.OutputTuple,
      ChangedDomainVerifierEvent.OutputObject
    >;
    ChangedDomainVerifier: TypedContractEvent<
      ChangedDomainVerifierEvent.InputTuple,
      ChangedDomainVerifierEvent.OutputTuple,
      ChangedDomainVerifierEvent.OutputObject
    >;

    "ChangedSafeMethod(address,bytes4,bytes32,bytes32)": TypedContractEvent<
      ChangedSafeMethodEvent.InputTuple,
      ChangedSafeMethodEvent.OutputTuple,
      ChangedSafeMethodEvent.OutputObject
    >;
    ChangedSafeMethod: TypedContractEvent<
      ChangedSafeMethodEvent.InputTuple,
      ChangedSafeMethodEvent.OutputTuple,
      ChangedSafeMethodEvent.OutputObject
    >;

    "RemovedDomainVerifier(address,bytes32)": TypedContractEvent<
      RemovedDomainVerifierEvent.InputTuple,
      RemovedDomainVerifierEvent.OutputTuple,
      RemovedDomainVerifierEvent.OutputObject
    >;
    RemovedDomainVerifier: TypedContractEvent<
      RemovedDomainVerifierEvent.InputTuple,
      RemovedDomainVerifierEvent.OutputTuple,
      RemovedDomainVerifierEvent.OutputObject
    >;

    "RemovedInterface(address,bytes4)": TypedContractEvent<
      RemovedInterfaceEvent.InputTuple,
      RemovedInterfaceEvent.OutputTuple,
      RemovedInterfaceEvent.OutputObject
    >;
    RemovedInterface: TypedContractEvent<
      RemovedInterfaceEvent.InputTuple,
      RemovedInterfaceEvent.OutputTuple,
      RemovedInterfaceEvent.OutputObject
    >;

    "RemovedSafeMethod(address,bytes4)": TypedContractEvent<
      RemovedSafeMethodEvent.InputTuple,
      RemovedSafeMethodEvent.OutputTuple,
      RemovedSafeMethodEvent.OutputObject
    >;
    RemovedSafeMethod: TypedContractEvent<
      RemovedSafeMethodEvent.InputTuple,
      RemovedSafeMethodEvent.OutputTuple,
      RemovedSafeMethodEvent.OutputObject
    >;
  };
}
