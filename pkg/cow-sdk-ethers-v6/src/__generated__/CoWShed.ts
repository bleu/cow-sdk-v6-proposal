/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CallStruct = {
  target: AddressLike;
  value: BigNumberish;
  callData: BytesLike;
  allowFailure: boolean;
  isDelegateCall: boolean;
};

export type CallStructOutput = [
  target: string,
  value: bigint,
  callData: string,
  allowFailure: boolean,
  isDelegateCall: boolean
] & {
  target: string;
  value: bigint;
  callData: string;
  allowFailure: boolean;
  isDelegateCall: boolean;
};

export interface CoWShedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimWithResolver"
      | "domainSeparator"
      | "executeHooks"
      | "initialize"
      | "nonces"
      | "revokeNonce"
      | "trustedExecuteHooks"
      | "trustedExecutor"
      | "updateImplementation"
      | "updateTrustedExecutor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RSV" | "TrustedExecutorChanged" | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimWithResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeHooks",
    values: [CallStruct[], BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeNonce",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedExecuteHooks",
    values: [CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrustedExecutor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimWithResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedExecuteHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrustedExecutor",
    data: BytesLike
  ): Result;
}

export namespace RSVEvent {
  export type InputTuple = [r: BytesLike, s: BytesLike, v: BigNumberish];
  export type OutputTuple = [r: string, s: string, v: bigint];
  export interface OutputObject {
    r: string;
    s: string;
    v: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedExecutorChangedEvent {
  export type InputTuple = [
    previousExecutor: AddressLike,
    newExecutor: AddressLike
  ];
  export type OutputTuple = [previousExecutor: string, newExecutor: string];
  export interface OutputObject {
    previousExecutor: string;
    newExecutor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoWShed extends BaseContract {
  connect(runner?: ContractRunner | null): CoWShed;
  waitForDeployment(): Promise<this>;

  interface: CoWShedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimWithResolver: TypedContractMethod<
    [resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  executeHooks: TypedContractMethod<
    [
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [factory: AddressLike, claimResolver: boolean],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[nonce: BytesLike], [boolean], "view">;

  revokeNonce: TypedContractMethod<[nonce: BytesLike], [void], "nonpayable">;

  trustedExecuteHooks: TypedContractMethod<
    [calls: CallStruct[]],
    [void],
    "nonpayable"
  >;

  trustedExecutor: TypedContractMethod<[], [string], "view">;

  updateImplementation: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTrustedExecutor: TypedContractMethod<
    [who: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimWithResolver"
  ): TypedContractMethod<[resolver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeHooks"
  ): TypedContractMethod<
    [
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [factory: AddressLike, claimResolver: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[nonce: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeNonce"
  ): TypedContractMethod<[nonce: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedExecuteHooks"
  ): TypedContractMethod<[calls: CallStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedExecutor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateImplementation"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTrustedExecutor"
  ): TypedContractMethod<[who: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "RSV"
  ): TypedContractEvent<
    RSVEvent.InputTuple,
    RSVEvent.OutputTuple,
    RSVEvent.OutputObject
  >;
  getEvent(
    key: "TrustedExecutorChanged"
  ): TypedContractEvent<
    TrustedExecutorChangedEvent.InputTuple,
    TrustedExecutorChangedEvent.OutputTuple,
    TrustedExecutorChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "RSV(bytes32,bytes32,uint8)": TypedContractEvent<
      RSVEvent.InputTuple,
      RSVEvent.OutputTuple,
      RSVEvent.OutputObject
    >;
    RSV: TypedContractEvent<
      RSVEvent.InputTuple,
      RSVEvent.OutputTuple,
      RSVEvent.OutputObject
    >;

    "TrustedExecutorChanged(address,address)": TypedContractEvent<
      TrustedExecutorChangedEvent.InputTuple,
      TrustedExecutorChangedEvent.OutputTuple,
      TrustedExecutorChangedEvent.OutputObject
    >;
    TrustedExecutorChanged: TypedContractEvent<
      TrustedExecutorChangedEvent.InputTuple,
      TrustedExecutorChangedEvent.OutputTuple,
      TrustedExecutorChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
