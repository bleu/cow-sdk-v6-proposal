/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GPv2SettlementInterface extends Interface {
  getFunction(
    nameOrSignature: "setPreSignature" | "invalidateOrder" | "domainSeparator"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;

  encodeFunctionData(
    functionFragment: "setPreSignature",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "setPreSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
}

export namespace TradeEvent {
  export type InputTuple = [
    owner: AddressLike,
    sellToken: AddressLike,
    buyToken: AddressLike,
    sellAmount: BigNumberish,
    buyAmount: BigNumberish,
    feeAmount: BigNumberish,
    orderUid: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    sellToken: string,
    buyToken: string,
    sellAmount: bigint,
    buyAmount: bigint,
    feeAmount: bigint,
    orderUid: string
  ];
  export interface OutputObject {
    owner: string;
    sellToken: string;
    buyToken: string;
    sellAmount: bigint;
    buyAmount: bigint;
    feeAmount: bigint;
    orderUid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GPv2Settlement extends BaseContract {
  connect(runner?: ContractRunner | null): GPv2Settlement;
  waitForDeployment(): Promise<this>;

  interface: GPv2SettlementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setPreSignature: TypedContractMethod<
    [orderUid: BytesLike, signed: boolean],
    [void],
    "nonpayable"
  >;

  invalidateOrder: TypedContractMethod<
    [orderUid: BytesLike],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setPreSignature"
  ): TypedContractMethod<
    [orderUid: BytesLike, signed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invalidateOrder"
  ): TypedContractMethod<[orderUid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "nonpayable">;

  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "Trade(address,address,address,uint256,uint256,uint256,bytes)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
